//
//   Copyright 2018  SenX S.A.S.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

buildscript {
  repositories {
    flatDir name:'ExternalJars', dirs:'./lib'
    mavenCentral()
    jcenter()
    maven {
      url "http://maven.twttr.com"
    }
    maven {
      url "http://127.0.0.1:40080/m2"
    }
  }

  dependencies {
    classpath files('./build/classes/main')
    classpath group: 'net.sf.proguard', name: 'proguard-gradle', version: '4.9'
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
  }
}

plugins {
  id 'com.github.johnrengelman.shadow' version '1.2.3'
}

apply plugin: 'java';
apply plugin: 'eclipse';
apply plugin: 'idea';
apply plugin: 'maven';
apply plugin: 'maven-publish';
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.7
targetCompatibility = 1.8

//
// Constants
//

// List of dependencies required by Warp10-pig
ext.requiredLibs = [ 'warpscript', 'libthrift', 'bcprov-jdk16', 'commons-io', 'commons-codec', 'commons-lang3', 'commons-math3',\
                     'compiler', 'core', 'curator-x-discovery', 'geoxplib', 'guava', 'hadoop-common', 'hadoop-mapreduce-client-core',\
                     'java-merge-sort','joda-time', 'jtransforms', 'jts', 'oss-client', 'sensision', 'slf4j-api', 'pyrolite',\
                     'jts2geojson', 'jackson-core', 'jackson-databind', 'jackson-annotations'  ]

//
// Configurations
//

configurations {
  warp10Pig
}

idea {
  module {
    inheritOutputDirs = true
    // add build/classes directory to excluded folders: index bytecode is not a really good idea ;)
    excludeDirs += file('build')
  }
}

//
// Repositories for dependency resolution
//

repositories {
  jcenter()
  mavenCentral()
  maven {
    url 'https://dl.bintray.com/hbs/maven'
  }
  maven {
    url 'https://dl.bintray.com/senx/maven'
  }
}



//
// Project source sets
// MUST appear before 'dependencies' so all source sets are known
//

sourceSets {
  main {
    java {
      srcDirs 'src/main/java'
    }
    resources {
      srcDir 'src/main/resources'
    }
  }
}

//
// Custom tasks
// MUST appear before task dependencies can be defined
//

//
// Custom tasks
// MUST appear before task dependencies can be defined
//

task(groovysh, dependsOn: 'compileJava', type: JavaExec) {
  main = 'org.codehaus.groovy.tools.shell.Main'
  classpath = sourceSets.main.runtimeClasspath
  args '-q'
}

//
// Project dependencies
//

dependencies {
  testCompile group: 'junit', name: 'junit', version: '4.12'

  // UTILS
  compile group: 'com.google.guava', name: 'guava', version: '15.0'

  //
  // Compile task dependency
  //

  compile group: 'org.apache.pig', name: 'pig', version: '0.17.0'
  compile 'io.warp10:warpscript:2.5.0'

  //
  // hadoop-client - (depends on) -> hadoop-hdfs, hadoop-common..
  //
  compile group: 'org.apache.hadoop', name: 'hadoop-client', version: '2.6.0'

  testCompile group: 'com.twitter.elephantbird', name: 'elephant-bird-core', version: '4.6'
  testCompile group: 'com.twitter.elephantbird', name: 'elephant-bird-hadoop-compat', version: '4.6'
  testCompile group: 'com.twitter.elephantbird', name: 'elephant-bird-pig', version: '4.6'

  //UPLOAD ARTIFACTS THROUGH SSH
  warp10Pig 'org.apache.maven.wagon:wagon-ssh-external:2.8'

}

//
// Force versions
//
configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    //failOnVersionConflict()

    // force certain versions of dependencies (including transitive)
    //  *append new forced modules:
    // This is needed to force Guava to 15.0 and not 17.0 as Renjin pulls
    // HBase does not work with > 15.0
    force 'com.google.guava:guava:15.0'
  }
}


//
// Eclipse classpath sanitization
//

eclipse.classpath.file {
  beforeMerged { classpath ->
    classpath.entries.removeAll { entry -> if (entry.kind == 'var') return false; if (entry.kind == 'lib' && entry.path.toString().contains('javax.servlet/servlet-api')) return true; return false; }
  }
}

// COMPILE OPTIONS
compileJava {
  if (null != System.getProperty("nojvmDebug")) {
    options.compilerArgs << '-g:none'
  } else {
    options.compilerArgs << '-g'
  }

  //options.debug = false;
  //options.optimize = false;
  //options.debugOptions.debugLevel = ''
}


// Gets the version name from the latest Git tag
// if no commit occurs -> the name of the tag likes 0.0.1
// if commit occurs -> 0.0.1-12-aabb1122 (number of commits + version number)
def getVersionName = { ->
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags', '--always'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}

//
// Check local git repo is synced with the remote
//
def isGitRepoSynced() {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'status', '-u', 'no', '--porcelain'
    standardOutput = stdout
  }

  //
  // Exclude gradle.properties
  //
  String val = stdout.toString().replaceAll(/.*\/Revision.java\n/, '')

  return (0 == val.trim().size())
}

version = getVersionName()
archivesBaseName = 'warp10-pig'
group = 'io.warp10'

gradle.taskGraph.whenReady { graph ->
  println "building warp10-pig version=$version"
  if (graph.hasTask(uploadArchives) || graph.hasTask(bintrayUpload)) {
   // if (!isGitRepoSynced()) {
   //   throw new GradleException("Cannot upload archive: local repo contains uncommited files (git status -u no --porcelain)")
   // }
  }

}

jar {
  manifest {
    attributes(
      "Implementation-Title": "Warp10-Pig",
      "Implementation-Version": version)
  }
}

def boolean isDepRequired(String currentDep ) {
  return requiredLibs.any { currentDep.equalsIgnoreCase(it) }
}

shadowJar {
  zip64 = true
  manifest {
    attributes("Implementation-Title": "Warp10-Pig")
    attributes("Implementation-Version": version)
  }

  relocate 'com.google', 'io.warp10.pig.com.google'
  classifier = null
}

task pack(type: Jar, dependsOn: jar) {
  zip64 = true

  manifest {
    attributes("Implementation-Title": "Warp10-Pig")
    attributes("Implementation-Version": version)
  }

  ext.listDeps = []

  configurations.compile.resolvedConfiguration.resolvedArtifacts.each {
    if (isDepRequired(it.moduleVersion.id.name)) {
      listDeps << it.file
    }
  }

  from files(sourceSets.main.output.classesDir)
  from {
    listDeps.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  } {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'about.html'
    exclude 'about_files/**'
    exclude 'plugin.properties'
    exclude 'jetty-dir.css'
  }
  with jar
}

// DEPLOY ON MAVEN REPO WITH SCP
uploadArchives {
    repositories {
        repositories.mavenDeployer {
            configuration = configurations.warp10Pig
            uniqueVersion = false

            ext.stagingUser = project.hasProperty('stagingUser') ? project.property('stagingUser') : System.getenv('STAGING_USER')
            ext.stagingURL = project.hasProperty('stagingURL') ? project.property('stagingURL') : System.getenv('STAGING_URL')

            if (null == stagingUser || null == stagingURL) {
                stagingUser = ''
                stagingURL = ''
            }

            repository(url: "scpexe://${stagingURL}") {
                authentication(userName: "${stagingUser}")
            }
        }
    }
}

publishing {
  publications {
    warp10Pig(MavenPublication) {
      artifact shadowJar {
        extension = 'jar'
      }
      //artifact file("${buildDir}/libs/warp10-pig-" + version + ".jar")
      groupId 'io.warp10'
      artifactId archivesBaseName
      version version
    }
  }
}

// DEPLOY ON BINTRAY
bintray {
    dryRun = false

    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = [ 'warp10Pig' ]

    pkg {
      repo = 'maven'
      name = 'warp10-pig'
      userOrg = 'senx'
      licenses = ['Apache-2.0']
      vcsUrl = 'https://github.com/senx/warp10-pig.git'
      version {
        name = getVersionName()
        released  = new Date()
        vcsTag = version
      }
    }
}

artifacts {
  archives shadowJar
}

//
// Tasks dependencies
//
shadowJar.dependsOn pack
uploadArchives.dependsOn shadowJar
bintrayUpload.dependsOn shadowJar
